x <- c(1,2,3,4)
x = c(1,2,3,4)
x[3]
length(x)
typeof(x)
names(x) <- c("uno",
"dos",
"tres",
"cuatro")
x
x
x <- 1:100
x
x <- seq(1, 100, by = 10)
x
x <- rep("a", 100)
x
typeof(x)
x<-1:100
x <- c(1,2,3,4)
x[4]
x[-2]
x[c(3,4)]
# Factores
x <- factor(c("M", "M", "F", "F"))
typeof(x)
# Factores
x <- factor(c("M", "M", "F", "F"),
levels = c("M", "F"),
labels = c("Hombre", "Mujer"))
x
# Factores
x <- factor(c("M", "M", "F", "F"),
levels = c("M", "F"),
labels = c("M", "F"))
x
x <- 1:5
x*x
x
x*c(1,2)
x <- 1:4
x <- 1:4
x*c(1,2)
# Matrices
x <- c(2,3,4,5,6,7,8,19)
length(x)
# Matrices
x <- c(2,3,4,5,6,7,8,19, 21)
x
matrix(x, nrow = 3, ncol = 3, byrow = TRUE)
matrix(x, nrow = 3, ncol = 3, byrow = FALSE)
m1 <- matrix(x, nrow = 3, ncol = 3, byrow = FALSE)
dim(m1)
m1 <- matrix(x, nrow = 3, ncol = 3, byrow = FALSE)
m2 <- matrix(x, nrow = 3, ncol = 3, byrow = TRUE)
rbind(m1, m2)
cbind(m1, m2)
nrow(m1)
ncol(m1)
# Data frames
id <- 1:5
# Data frames
id <- 1:5
sex <- c("M", "M", "F", "F", "M")
edad <- c(10, 11, 50, 24, 24)
id
sex
edad
df <- data.frame(id = id, sexo = sex,
age = edad)
df
df[1,]
df[, 2]
df[2,2]
df$age
df$age[3]
df[3,3]
df[c("id", "age")]
df[,c(1,3)]
subset(df, select = c(id, age))
subset(df, select = -c(id, age))
summary(df)
df$sexo = factor(df$sexo)
df$sexo = as.factor(df$sexo)
summary(df)
# Listas
lista <- list(vector = x,
matriz = m1,
dataframe = df)
lista
lista$vector
lista$matriz
lista$dataframe
lista[1]
lista[[1]]
lista[[1]][5]
x <- 10
if (x > 5) {
print("x es mayor que 5")
}
x <- 2
if (x > 5) {
print("x es mayor que 5")
}
# De otro modo:
x <- 2
if (x > 5) {
print("x es mayor que 5")
} else {
print("x es menor o igual que 5")
}
z <- (x - mean(x))/sd(x)
# Siguiendo la estructura general, definimos una función para estandarizar
# variables
f_z = function(x){
z <- (x - mean(x))/sd(x)
return(z)
}
x <- 1:20
z <- f_z(x)
mean(z)
sd(z)
x
z
# Ambas utilidades: definición de la función a partir de un condicional
par_impar <- function(x){
if(x %% 2 == 0){
return("El número es par")
} else {
return("El número es impar")
}
}
par_impar(5)
par_impar(2)
# Documentación del paquete
help("tidyverse")
??tidyverse
help(summarise)
help(filter)
file.choose()
# Importar formato .xlsx
dataset <- readxl::read_excel("Datos/Formatos/geih_dataset.xlsx")
setwd("C:/Users/PC/Desktop/Curso-EDA-2024/")
setwd("C:/Users/Portatil/Desktop/Curso-EDA-2024/")
# Importar formato .xlsx
dataset <- readxl::read_excel("Datos/Formatos/geih_dataset.xlsx")
# Véase las rutas alternativas
dataset <- readxl::read_excel(file.choose())
# Intente importar usando otras funciones
df1 <- read_csv("Datos/Formatos/geih_dataset.csv", col_names = T)
library(tidyverse)
library(haven)
# Intente importar usando otras funciones
df1 <- read_csv("Datos/Formatos/geih_dataset.csv", col_names = T)
df2 <- haven::read_sav("Datos/Formatos/geih_dataset.spss")
df3 <- haven::read_dta("Datos/Formatos/geih_dataset.dta")
df4 <- haven::read_sas("Datos/Formatos/geih_dataset.sas")
# Guardemos la base de datos en .RDS
saveRDS(dataset, "Datos/Formatos/geih_dataset.rds")
# Cargar el archivo en .RDS
readRDS("Datos/Formatos/geih_dataset.rds")
View(dataset)
#### Los objetos son nombres para referirnos a datos almacenados
x <- 1:6
#### Los objetos son nombres para referirnos a datos almacenados
x <- 1:6
x/2
#### Los objetos son nombres para referirnos a datos almacenados
x <- 1:6
#### Sensible a mayúsculas
A1 <- 1
a1 <- 2
A1
a1
A1 + 1
a1 + 1
#### Crear un vector
text <- c("x", "y", "z")
text
#### Crear un vector usando secuencias
num <- 50:54
num
num[1] # elemento 1
num[-1] # descartar elemento 1
num[c(2,3)] #  elemento 2 y 3
num[-c(2,3)] # descartar elementos 2 y 3
length(num) # longitud
typeof(num) # tipo
names(num) <- c("uno", "dos", "tres",
"cuatro", "cinco") # asignar nombres
num
names(num) <- c("a", "dos", "tres",
"cuatro", "c") # asignar nombres
num
y <- c("a", "b")
y[2]
y = c("a", "b")
y
v1 <- c(2,3,5,7,11, 13)
v2 <- c(2,4,6,8,10,12)
v1
v2
v1*v2
# ejecución por elementos con distinta dimesión
# cuando la longitud de v2 es múltiplo de la longitud de v1
v2 <- c(1,2,3)
v1
v2
v1*v2
#### Construcción de patrones
seq1 <- seq(1, 20, by = 2)
seq1
#### Construcción de patrones
seq1 <- seq(1, 20, by = 2)
seq1
#### Construcción de patrones
seq1 <- seq(1, 100, by = 10)
seq1
rep1 <- rep(2,12)
rep1
rep1 <- rep("a",12)
rep1
rep1
#### Los vectores pueden ser concatenados usando c()
v2 <- c(num, 2:40)
num
#### Los vectores pueden ser concatenados usando c()
v2 <- c(num, 2:40)
c
v2
##### Crear factores
gender <- factor(c("male", "female", "female", "female"))
gender
##### Crear factores
gender <- factor(c("male", "female", "female", "female",
"male", "female", "male"))
gender
##### Crear factores
gender <- factor(c("male", "female", "female", "female",
"male", "female", "male", "nb"))
gender
# Recodificar niveles
gender.recod <- factor(gender,
levels = c("male", "female"),
labels = c("M", "F"))
##### Crear factores
gender <- factor(c("male", "female", "female", "female",
"male", "female", "male"))
gender
# Recodificar niveles
gender.recod <- factor(gender,
levels = c("male", "female"),
labels = c("hombre", "mujer"))
gender.recod
# Crear según columnas (default)
m1 <- matrix(c(1,2,4,6,7,4,1,3,2),nrow = 3,
ncol = 3, byrow = T)
m1
# Crear según columnas (default)
m1 <- matrix(c(1,2,4,6,7,4,1,3,2),nrow = 3,
ncol = 3, byrow = F)
m1
# Seleccionar entradas
m1[2,1] # entrada (2,1)
m1[2,]  #  fila 2
m1[,1]  #  columna 1
# Descartar entradas
m1[-2,] # fila 2
m1[,-1] # columna 1
m1[-2,-1] # ambas
m1
m2
# Crear según filas
m2 <- matrix(1:9, nrow = 3, ncol = 3, byrow = T)
m1
m2
# Agregar filas o columnas
rbind(m1,m2)
cbind(m1,m2)
# Verificar dimensión
dim(m1)
nrow(m1)
ncol(m1)
# Suma y resta
m1 + m2
m1 - m2
# La ejecución por elementos no corresponde a la operación por matrices
m1*m2
# Producto de matrices
m1 %*% m2
(m1)
2*m1  # Producto por escalar
det(m1) # Determinante
solve(m1) # Inversa
df <- data.frame(id, sexo, edad)
# Creemos un data frame a partir de los siguientes vectores
id <- 1:4
sexo <- c("M", "M", "F", "F")
edad <- c(15, 26, 43, 56)
df <- data.frame(id, sexo, edad)
df
# La selección de entradas es análoga a las matrices
df[1,2]
df[c(1,2),]
df[,c(2,3)]
# Adicionalmente, la siguiente sintaxis es útil:
df$edad
df$edad[1]
df[c("id", "edad")]
df$edad[3]
df$id[3]
df[c("id", "edad")][1]
df
# Usar la función subset
subset(df, select = c(id, edad))
subset(df, select = -c(id, edad))
rm(m1)
df <- data.frame(id, sexo, edad)
